head	1.3;
access;
symbols;
locks
	ndd:1.3; strict;
comment	@ * @;


1.3
date	2018.03.19.15.43.50;	author ndd;	state Exp;
branches;
next	1.2;

1.2
date	2018.03.07.21.55.37;	author ndd;	state Exp;
branches;
next	1.1;

1.1
date	2018.03.07.21.41.55;	author ndd;	state Exp;
branches;
next	;


desc
@converting from matlab to C
@


1.3
log
@added some more code, ready to work on dynaField
@
text
@/*
% function [dynaImat] = field2dyna(NodeName, alpha, Fnum, focus, Frequency,
%	Transducer, Impulse, threads, lownslow, ElemName, ForceNonlinear)
%
% INPUT:
%   NodeName (string) - file name to read nodes from (e.g., nodes.dyn); needs
%                       to be a comma-delimited file with header/footer lines
%                       that start with '*'
%   alpha - 0.5, 1.0, etc. (dB/cm/MHz)
%   Fnum - F/# (e.g. 1.3)
%   focus - [x y z] (m) "Field" coordinates
%   Frequency - excitation frequency (MHz)
%   Transducer (string) - 'vf105','vf73'
%   Impulse (string) - 'gaussian','exp'
%   threads (int) - number of parallel threads to use for Field II Pro
%   lownslow (bool) - low memory footprint, or faster parallel (high RAM)
%		[default = 0]
%   ElemName (string) - file name to read elements from (default: elems.dyn);
%                       like node file, needs to be comma-delimited.
%   ForceNonlinear(int) - optional input argument. Set as 1 if you want to
%                         force nodal volumes to be calculated.
%
% OUTPUT:
%   dyna-I-*.mat file is saved to CWD and filename string returned
%
% EXAMPLE:
% dynaImatfile = field2dyna('nodes.dyn', 0.5, 1.3, [0 0 0.02], 7.2, 'vf105',
%	'gaussian', ..., 12, 'elems.dyn', 1);
%
% Mark Palmeri
% mlp6@@duke.edu
% 2015-03-17
%
% Ned Danieley
*/
#include <stdio.h>
#include <stdlib.h>
#include "field.h"

int checkOnAxis();

char *
field2dyna(char *nodeName, float alpha, float fnum, struct Focus focus,
	float freq, char *transducer, char *impulse, int threads,
	int lowNslow, char *elemName, int forceNonlinear)
{
int i, numNodes;
float temp;
struct nodeEntry *pointsAndNodes, *readMpn();
struct FieldParams fieldParams;

	fprintf(stderr, "calling readMpn; node name %s\n", nodeName);

	pointsAndNodes = readMpn(nodeName, &numNodes);

	fprintf(stderr, "after readMpn; numNodes %d\n", numNodes);

	for (i = 0; i < 13; i++)
	    fprintf(stderr, "node %d is %d, %f, %f, %f\n", i, pointsAndNodes[i].nodeID, pointsAndNodes[i].x, pointsAndNodes[i].y, pointsAndNodes[i].z);

	if (!checkOnAxis(pointsAndNodes, numNodes)) {
		fprintf(stderr, "There are no nodes in the lateral / elevation plane = 0 (imaging plane).\n");
		fprintf(stderr, "This can lead to inaccurate representations of the intensity fields!!')\n");
		}

/* invert the z axis */
	for (i = 0; i < numNodes; i++) pointsAndNodes[i].z = -pointsAndNodes[i].z;

/* switch x and y */
	for (i = 0; i < numNodes; i++) {
		temp = pointsAndNodes[i].x;
		pointsAndNodes[i].x = pointsAndNodes[i].y;
		pointsAndNodes[i].y = temp;
		}

/* change from centimeters to meters */
	for (i = 0; i < numNodes; i++) {
		pointsAndNodes[i].x /= 100;
		pointsAndNodes[i].y /= 100;
		pointsAndNodes[i].z /= 100;
		}

/* populate structure for dynaField */

	fieldParams.pointsAndNodes = pointsAndNodes;
	fieldParams.alpha = alpha;
	fieldParams.fnum = fnum;
	fieldParams.focus = focus;
	fieldParams.frequency = freq;
	fieldParams.transducer = transducer;
	fieldParams.impulse = impulse;
	fieldParams.soundSpeed = 1540;
	fieldParams.samplingFrequency = 100e6;

/*
 * at this point the matlab code sets up some defaults, because apparently
 * you can call a matlab function without passing all the arguments that it
 * excepts. can't do that in C.
 */

/* call dynaField here */
}
@


1.2
log
@moved structs to field.h, got checkOnAxis working.
@
text
@d50 1
d80 1
d82 20
@


1.1
log
@Initial revision
@
text
@d38 1
a38 19

struct nodeEntry {
	int nodeID;
	float x, y, z;
	} *readMpn();

struct Focus {
	int x, y, z;
	};

struct FieldParams {
	float alpha;
	struct nodeEntry *pointsAndNodes;
	float fnum;
	struct Focus focus;
	float frequency;
	char *transducer, *impulse;
	int threads, lowNslow;
	};
d49 1
a49 1
struct nodeEntry *pointsAndNodes;
d60 4
a63 1
	checkOnAxis();
@
