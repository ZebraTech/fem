#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int
main(int argc, char **argv)
{
FILE *nodout;
size_t lineLength = 160;
char *buf;
char *ptr;
int numChars;
int timestepRead = 0;
int timestepCount = 0;
char nodeID[15], *xdisp, *ydisp, *zdisp;
int node;
double dispVals[3];

	if ((nodout = fopen("foo", "r")) == NULL) {
		fprintf(stderr, "yikes\n");
		exit(1);
		}

	buf = (char *) malloc(lineLength + 1);

	xdisp = (char *) malloc(15);
	ydisp = (char *) malloc(15);
	zdisp = (char *) malloc(15);

	while ((numChars = getline(&buf, &lineLength, nodout)) != -1) {
/*		printf("got %s\n", buf); */
/* 		printf("numChars %d\n", numChars); */
		if (strstr(buf, "nodal") != NULL) {
			printf("got nodal\n");
			timestepRead = 1;
			timestepCount += 1;
			continue;
			}
		if (timestepRead) {
			if (numChars == 1) timestepRead = 0;
			else {
				strncpy(nodeID, buf, 10);
				nodeID[10] = '\0';
				node = atoi(nodeID);
				strncpy(xdisp, buf+10, 12);
				xdisp[12] = '\0';
				if ((ptr = strchr(xdisp, 'E')) == NULL) correctE(xdisp);
				dispVals[0] = atof(xdisp);
				strncpy(ydisp, buf+22, 12);
				ydisp[12] = '\0';
				if ((ptr = strchr(xdisp, 'E')) == NULL) correctE(ydisp);
				dispVals[1] = atof(ydisp);
				strncpy(zdisp, buf+34, 12);
				zdisp[12] = '\0';
				if ((ptr = strchr(xdisp, 'E')) == NULL) correctE(zdisp);
				dispVals[2] = atof(zdisp);
				if (timestepCount == 2) {
					printf("nodeID %s x %s y %s z %s\n", nodeID, xdisp, ydisp, zdisp);
					printf("node %d x %e y %e z %e\n", node, dispVals[0], dispVals[1], dispVals[2]);
					}
				}
			}
		}
}

correctE(char *disp)
{
size_t len;
char *tmp;
char *ptr;
int insertPos;
int shift = 1;


	tmp = (char *) malloc (30 + 1);

	if ((ptr = strchr(disp, '-')) == NULL) {
		printf("can't happen\n");
		exit(0);
		}
	insertPos = ptr - disp;
	printf("insertPos %d\n", insertPos);
	memmove(ptr + shift, ptr, strlen(ptr) +1);
	strncpy(disp + insertPos, "E", 1);
	printf("xdisp is %s\n", disp);
}
